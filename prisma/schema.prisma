// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String
  password      String?
  emailVerified DateTime?
  image         String?
  imagePublicId String?
  role          Role      @default(None)

  // Projects the user owns
  ownedProjects Project[] @relation("ProjectOwner")

  // Projects the user is working on
  assignedProjects ProjectAssignment[]

  // Tickets the user created
  ticketsCreated Ticket[] @relation("CreatedBy")

  // Tickets assigned to the user
  ticketsAssignedTo Ticket[] @relation("AssignedTo")

  // Tickets the user is a member of
  ticketMembers TicketAssignment[] @relation("TicketMember")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Account Account[]

  Session Session[]
}

model Project {
  id          String        @id
  name        String
  description String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId     String
  deadline    DateTime
  status      ProjectStatus @default(Ongoing)

  // Users working on the project
  members ProjectAssignment[]

  // Tickets related to the project
  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String         @id
  title       String
  description String
  status      TicketStatus   @default(Open)
  priority    TicketPriority @default(Medium)
  type        TicketType     @default(Bug)

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  assignedTo   User?   @relation(name: "AssignedTo", fields: [assignedToId], references: [id])
  assignedToId String?

  createdBy   User   @relation(name: "CreatedBy", fields: [createdById], references: [id])
  createdById String

  members TicketAssignment[] @relation("TicketMember")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectAssignment {
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model TicketAssignment {
  userId   String
  ticketId String

  user   User   @relation("TicketMember", fields: [userId], references: [id])
  ticket Ticket @relation("TicketMember", fields: [ticketId], references: [id])

  @@id([userId, ticketId])
}

enum ProjectStatus {
  Ongoing
  Closed
  Overdue
}

enum Role {
  Admin
  Manager
  Developer
  Contributor
  None
}

enum TicketStatus {
  Open
  In_Progress
  In_Review
  Resolved
  Closed
}

enum TicketPriority {
  Low
  Medium
  High
  Critical
}

enum TicketType {
  Bug
  Task
  Others
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
